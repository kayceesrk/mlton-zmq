<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta name="robots" content="index,nofollow">



<title>MLtonIntInf - MLton Standard ML Compiler (SML Compiler)</title>
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="all" href="common.css">
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="screen" href="screen.css">
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="print" href="print.css">


<link rel="Start" href="Home">


</head>

<body lang="en" dir="ltr">

<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-833377-1";
urchinTracker();
</script>
<table bgcolor = lightblue cellspacing = 0 style = "border: 0px;" width = 100%>
  <tr>
    <td style = "
		border: 0px;
		color: darkblue; 
		font-size: 150%;
		text-align: left;">
      <a class = mltona href="Home">MLton MLTONWIKIVERSION</a>
    <td style = "
		border: 0px;
		font-size: 150%;
		text-align: center;
		width: 50%;">
      MLtonIntInf
    <td style = "
		border: 0px;
		text-align: right;">
      <table cellspacing = 0 style = "border: 0px">
        <tr style = "vertical-align: middle;">
      </table>
  <tr style = "background-color: white;">
    <td colspan = 3
	style = "
		border: 0px;
		font-size:70%;
		text-align: right;">
      <a href = "Home">Home</a>
      &nbsp;<a href = "TitleIndex">Index</a>
      &nbsp;
</table>
<div id="content" lang="en" dir="ltr">

<pre class=code>
<B><FONT COLOR="#0000FF">signature</FONT></B> MLTON_INT_INF =
   <B><FONT COLOR="#0000FF">sig</FONT></B>
      <B><FONT COLOR="#A020F0">type</FONT></B><B><FONT COLOR="#228B22"> t </FONT></B>=<B><FONT COLOR="#228B22"> IntInf.int

      </FONT></B><B><FONT COLOR="#A020F0">val</FONT></B> areSmall: t * t -&gt; bool
      <B><FONT COLOR="#A020F0">val</FONT></B> gcd: t * t -&gt; t
      <B><FONT COLOR="#A020F0">val</FONT></B> isSmall: t -&gt; bool

      <B><FONT COLOR="#0000FF">structure</FONT></B> BigWord : WORD
      <B><FONT COLOR="#0000FF">structure</FONT></B> SmallInt : INTEGER
      <B><FONT COLOR="#A020F0">datatype</FONT></B><B><FONT COLOR="#228B22"> rep </FONT></B>=<B><FONT COLOR="#228B22">
         <FONT COLOR="#B8860B">Big</FONT> <B><FONT COLOR="#A020F0">of</FONT></B> BigWord.word vector
       </FONT></B>|<B><FONT COLOR="#228B22"> <FONT COLOR="#B8860B">Small</FONT> <B><FONT COLOR="#A020F0">of</FONT></B> SmallInt.int
      </FONT></B><B><FONT COLOR="#A020F0">val</FONT></B> rep: t -&gt; rep
      <B><FONT COLOR="#A020F0">val</FONT></B> fromRep : rep -&gt; t
   <B><FONT COLOR="#0000FF">end</FONT></B>
</PRE>
<p>
 
</p>
<p>
MLton represents an arbitrary precision integer either as an unboxed word with the bottom bit set to 1 and the top bits representing a small signed integer, or as a pointer to a vector of words, where the first word indicates the sign and the rest are the limbs of a <a href="GnuMP">GnuMP</a> big integer. 
</p>

    <ul>

    <li>
<p>
 <tt>type&nbsp;t</tt>  <br>
the same as type <tt>IntInf.int</tt>. 
</p>
</li>
    <li class="gap">
<p>
 <tt>areSmall&nbsp;(a,&nbsp;b)</tt>  <br>
returns true iff both <tt>a</tt> and <tt>b</tt> are small. 
</p>
</li>
    <li class="gap">
<p>
 <tt>gcd&nbsp;(a,&nbsp;b)</tt>  <br>
uses the <a href="GnuMP">GnuMP's</a> fast gcd implementation. 
</p>
</li>
    <li class="gap">
<p>
 <tt>isSmall&nbsp;a</tt>  <br>
returns true iff <tt>a</tt> is small. 
</p>
</li>
    <li class="gap">
<p>
 <tt>BigWord&nbsp;:&nbsp;WORD</tt>  <br>
representation of a big <tt>IntInf.int</tt> as a vector of words; on  32-bit platforms, <tt>BigWord</tt> is likely to be equivalent to  <tt>Word32</tt>, and on 64-bit platforms, <tt>BigWord</tt> is likely to be  equivalent to <tt>Word64</tt>. 
</p>
</li>
    <li class="gap">
<p>
 <tt>SmallInt&nbsp;:&nbsp;INTEGER</tt>  <br>
representation of a small <tt>IntInf.int</tt> as a signed integer; on  32-bit platforms, <tt>SmallInt</tt> is likely to be equivalent to  <tt>Int32</tt>, and on 64-bit platforms, <tt>SmallInt</tt> is likely to be  equivalent to <tt>Int64</tt>. 
</p>
</li>
    <li class="gap">
<p>
 <tt>datatype&nbsp;rep</tt>  <br>
the underlying representation of an <tt>IntInf.int</tt>. 
</p>
</li>
    <li class="gap">
<p>
 <tt>rep&nbsp;i</tt>  <br>
returns the underlying representation of <tt>i</tt>. 
</p>
</li>
    <li class="gap">
<p>
 <tt>fromRep&nbsp;r</tt>  <br>
converts from the underlying representation back to <tt>i</tt>.   If the input is not identical to the result of <tt>rep</tt>, the result is undefined. 
</p>
</li>
</ul>

</div>



<p>
<hr>
Last edited on 2009-09-11 15:13:38 by <span title="ottawa.dvs.informatik.tu-darmstadt.de"><a href="WesleyTerpstra">WesleyTerpstra</a></span>.
</body></html>
